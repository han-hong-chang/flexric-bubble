/* 
 * Handling messages in E2 interface that have to communicate to SM block
 * - message forwarding to WS interface  (report procedure/subscription msg)
 * - message receiving from Ws interface (ran function procedure/setup request)
 * - async reading leveraging ringbuffer data structure for reading shared data filled by WS interface 
 *   in response to an indication msgs (report procedure/indication)
 */
#ifndef E2_SM_AGENT_H
#define E2_SM_AGENT_H 

#include "../agent/e2_agent_api.h"
#include "lib/ind_event.h"

// #include "notif_e2_ws.h"
// #include "ringbuffer.h"

/* 
 * type of messages generated by WS interface. They will be handled by ws_msg_hdlr.c:ws_msg_handle()
 */
typedef enum {
      // msg coming from WS for E2
      WS_E2_NONE = 0, // it means that message from WS does not have to be propagated to E2 interface
      WS_E2_CONFIG_FWD,
      WS_E2_SETUP      
} ws_e2_type_id_t;

// messages coming from E2 interface
typedef struct e2_agent_msg_t{
  ws_e2_type_id_t type_id;
  union{  
    ind_event_t ws_sub;
    // message content to be filled according to type above. Reasoning similar to type_defs.h
    // i.e. msg_config_type config_msg;
    // i.e. e2_setup_type   e2setup_msg_;
  } ;
} e2_agent_msg_t;

/*
 * Handle the E2 indication msg for the report procedure.
 * It is implemented with an async reading of a ringbuffer data structure 
 * filled by WS interface with its own timing in response to a subscription request.
 */
void           e2_read_RAN(sm_ag_if_rd_t *data);

/* handle CTRL procedure, notably for SLICE SM*/
sm_ag_if_ans_t e2_write_RAN(sm_ag_if_wr_t const *data);

#endif